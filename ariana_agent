#!/bin/bash

# This Agent collect dstat data for csv
# jaekwon.park@code-post.com
# https://github.com/code-post/ariana_agent

while getopts "d:" opt
do
	case $opt in
		d)
			if [[ $OPTARG =~ ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$  ]]
                        then
                                Date=$OPTARG
			else
				echo $OPTARG
				echo "some paramater mismatch" 
				exit 1
                        fi
		;;
	esac
done
shift $(( $OPTIND  -1 ))
command=$1
			

Data_Directory=/var/log/dstat
HostListFile=hostlist
HostName=$(hostname -s)
if [ -z $Date ]
then
	Date=$(date +%Y-%m-%d)
fi
dstat_path=$(type -p dstat)
python_path=$(type -p python)
ariana_agent_path=/usr/local/bin/ariana_agent

function update ()
{
	curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# https://raw.githubusercontent.com/code-post/ariana_agent/master/ariana_agent -o /tmp/ariana_agent
	exception_check
	chmod +x /tmp/ariana_agent 
	exception_check
	mv -f /tmp/ariana_agent $ariana_agent_path
	exception_check
	echo "update done"
}
	



function print_help()
{
	echo $0 " [Command]"
	echo "System Resource collected using dstat"
	echo "This agnet working for Ubuntu/Debian or RHEL/CentOS"
	echo ""
	echo " [option] "
	echo "  -d 	define date for merge command. default option is today date"
	echo ""
	echo " [Command] "
	echo " run 	running dstat"
	echo " stop 	stopping dstat"
	echo " merge	merge dstat csv file"
	echo " status	show running dstat status"
	echo " update	ariana agent self update"
	echo ""
	echo "usage example)"
	echo $0 "run"
	echo $0 "merge"
	echo $0 " -n 2017-07-01 merge"
}

function exception_check()
{
	if [ $? -eq 0 ]
	then
		echo "done"
	else
		echo "above task return code "$?
		echo "something wrong"
		exit 1
	fi
}

function check_and_install ()
{
	rpm_path=$(type -p rpm)
	dpkg_path=$(type -p dpkg)

	if [ -e "$rpm_path" ]
	then
		yum -y install dstat
		exception_check
	elif [ -e $dpkg_path ]
	then
		apt-get install -y dstat
		exception_check
	else
		echo "Con't find dstat package"
	fi
}

function run ()
{
	# add hostname to hostlist file
	if [ $(grep $HostName $Data_Directory/$HostListFile | wc -l) -eq "0" ]
	then
		echo "Add "$HostName" to "$HostListFile
		echo $HostName >> $Data_Directory/$HostListFile
	fi
	# dstat running check
	if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -eq 0 ]
	then
		# csv file check
		if [ -f $Data_Directory/$HostName-$Date.csv ]
		then
			# csv file count
			filecount=$(ls -alh $Data_Directory| grep $HostName-$Date.csv | wc -l)
			# change for matting single number for dual number [0-9] -> [00-99]
			if [[ $(ls -alh $Data_Directory| grep $HostName-$Data.csv | wc -l) = [0-9] ]]
			then
				filecount=0$filecount
			fi
			# move exist csv file to csv.[00-99]
			echo $Data_Directory/$HostName-$Date.csv" file exists"
			echo $Data_Directory/$HostName-$Date.csv" has been moved to "$Data_Directory/$HostName-$Date.csv.$filecount
			mv $Data_Directory/$HostName-$Date.csv $Data_Directory/$HostName-$Date.csv.$filecount
			exception_check
		fi
		dstat --time -v --net --output $Data_Directory/$HostName-$Date.csv > /dev/null &
	else
		running_check
	fi
}

function running_check ()
{
	# compare dstat csv file date 
	if [ "$Date" != "$(ps -ef | grep -v grep | grep $dstat_path | awk '{print $NF}' | awk -F- '{print $2"-"$3"-"$4}' | awk -F. '{print $1}')" ]
        then
        	echo "dstat collected old date. rerunning"
                echo $Date
                echo $(ps -ef | grep -v grep | grep $dstat_path | awk '{print $NF}' | awk -F- '{print $2"-"$3"-"$4}' | awk -F. '{print $1}')
                stop
		run
        else
                echo "dstat already running. check the dstat process."
                ps -ef | grep -v grep | grep "$dstat_path"
        fi

}


function merge ()
{
	# check for dstat proccess before merge. 
        if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -ne 0 ]
	then
		echo "dstat already running. check the dstat process."
		echo "can not be merge to dstat process running"
		ps -ef | grep -v grep | grep "$dstat_path"
		exit 0;
	fi

	# check temp file and compare md5sum result for temp and csv file
	if [ -f $Data_Directory/$HostName-$Date.csv.temp ]
	then
		if [ "$(md5sum $Data_Directory/$HostName-$Date.csv | awk '{print $1}')" == "$(md5sum $Data_Directory/$HostName-$Date.csv.temp | awk '{print $1}')" ]
		then
			echo $Data_Directory/$HostName-$Date.csv" file already merged"
			exit 0;
		else
			rm -rf $Data_Directory/$HostName-$Date.csv.temp
			exception_check
		fi

	fi
	echo $Data_Directory"/"$HostName-$Date".csv file move to "$Data_Directory"/"$HostName-$Date".csv.00"
	##### csv file formatting check start #####
	# remake csv header 
	head -n 7 $Data_Directory/$HostName-$Date.csv > $Data_Directory/$HostName-$Date.csv.00
	exception_check
	# move to data except head and blank line
	cat $Data_Directory/$HostName-$Date.csv | sed "/\"/d" | sed "/^\s*$/d" >> $Data_Directory/$HostName-$Date.csv.00	
	exception_check
	##### csv file formatting check end #####

	##### csv file merge start #####
	# first csv file merge 
	echo $Data_Directory/$HostName-$Date.csv.00" file merged"
	cat $Data_Directory/$HostName-$Date.csv.00 | sed "/^\s*$/d" >> $Data_Directory/$HostName-$Date.csv.temp
	exception_check
	# csv file count
	filecount=$(ls -alh $Data_Directory | grep $HostName-$Date.csv.'[00-99]' | wc -l)
	# except csv.00 for count 
	let filecount=$filecount-1
	echo "found "$filecount " files"
	# merge all count csv file
	for i in $(seq 1 $filecount)
	do
		if [[ $i = [0-9] ]]
		then
			i=0$i
		fi
		echo $Data_Directory/$HostName-$Date.csv.$i" file merged"
		cat $Data_Directory/$HostName-$Date.csv.$i | sed "/\"/d" | sed "/^\s*$/d" >> $Data_Directory/$HostName-$Date.csv.temp
		exception_check
	done
	# move to temp file to csv
	cat $Data_Directory/$HostName-$Date.csv.temp > $Data_Directory/$HostName-$Date.csv
	exception_check
	##### csv file merge end #####
}

function stop ()
{
        if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -ne 0 ]
	then 
		pid=$(ps -ef | grep -v grep | grep $dstat_path | awk '{print $2}')
		echo "dstat running pid "$pid
		echo "Try stop dstat"
		kill -9 $pid
		exception_check
	else
		echo "can't find dstat process"
		exit 0
	fi
}
function status ()
{
	
        if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -ne 0 ]
	then
		pid=$(ps -ef | grep -v grep | grep $dstat_path | awk '{print $2}')
		echo "dstat running pid "$pid
		ps -ef | grep -v grep | grep $dstat_path | awk -F--output '{printf "Dstat logging is "$2"\n"}'
		echo "today's log files is "
		ls -alh $Data_Directory | grep $HostName-$Date.csv | awk '{printf "Log file "$9" size is "$5"\n"}'
	else
		echo "dstat doesn't running"
		exit 1
	fi
}


case $command in
	run)
		if [ -z $(type -p dstat) ]
		then
			check_and_install
		fi
		run
	;;
	merge)
		if [ -z $(type -p dstat) ]
		then
			check_and_install
		fi
		merge
	;;
	status)
		if [ -z $(type -p dstat) ]
		then
			check_and_install
		fi
		status
	;;
	stop)
		stop
	;;
	update)
		update

	;;
	*)
		print_help
	;;
esac
