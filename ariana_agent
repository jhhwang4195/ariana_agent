#!/bin/bash

# This Agent collect dstat data for csv
# jaekwon.park@code-post.com
# https://github.com/code-post/ariana_agent

while getopts "d:s:m:n:h:u:" opt
do
	case $opt in
		d)
			if [[ $OPTARG =~ ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$  ]]
                        then
                                Date=$OPTARG
			else
				echo $OPTARG
				echo "some paramater mismatch"
				exit 1
                        fi
		;;
		s)
			if [[ $OPTARG =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$ ]]
			then
				rsyslog_server=$OPTARG

			else
				echo $OPTARG
				echo "Server ip is not correct"
				exit 1
			fi
		;;
		m)
			if [ "$OPTARG" == "standalone" ] || [ "$OPTARG" == "server" ]
			then
				mode=$OPTARG
			else
				echo $OPTARG
				echo "mode support only standalone or server"
				echo "using -m standalone or -m server"
				exit 1
			fi
		;;
		n)
			upload_filename=$OPTARG
		;;
		h)
			HostName=$OPTARG
		;;
		u)
			dashboard_url=$OPTARG
		;;
	esac
done
shift $(( $OPTIND  -1 ))
command=$1

function print_help()
{
        echo $0 " [Command]"
        echo "System Resource collected using dstat"
        echo "This agnet working for Ubuntu/Debian or RHEL/CentOS"
        echo ""
        echo " [option] "
        echo "  -d              define date for merge command. default option is yesterday. support format yyyy-mm-dd"
        echo "  -m              ariana_agent logging mode. Support standalone and server. Default is standalone"
        echo "                	standalone mode just collect dstat log "
        echo "                	server mode dstat log send to server. server set to set_server command"
        echo "  -s              set ariana server ip"
        echo "  -n              define upload log file name. only using upload command"
        echo "  -h              define hostname.  default hostname is find localhost hame"
        echo "  -u              define upload url"
        echo ""
        echo " [Command] "
        echo " run              running dstat"
        echo " server_run	running dstat log collected server"
        echo " stop             stopping dstat"
        echo " merge            merge dstat csv file."
        echo " status           show running dstat status"
        echo " update           ariana agent self update"
        echo " config           ariana configration setup. ariana config file location is /etc/ariana/config"
	echo "			if you change log directory edit /etc/ariana/config Data_Directory"
        echo " set_server       ariana ariana server setup. this command automatic set client mode. "
        echo "                  set_server command will be download ariana_logrotate. this is include auto upgrade ariana_logrotate"
        echo " set_client       ariana ariana client setup. must set rsyslog server ip using -s option"
        echo " upload           log file upload ariana dashboard directly. default upload file is yesterday csv"
        echo ""
        echo "usage example)"
        echo $0 "run"
        echo $0 "merge"
        echo $0 " -n 2017-07-01 merge"
        echo $0 " -s 20.170.70.1 -m server -u http://upload.url config"
        echo $0 " set_client"
        echo $0 " set_server"
        echo $0 " server_run"
}

function exception_check()
{
        if [ $? -eq 0 ]
        then
                if [ -z $1 ]
                then
                        echo "done"
                fi
        else
                echo "above task return code "$?
                echo "something wrong"
                exit 1
        fi
}

function check_and_install ()
{
	rpm_path=$(type -p rpm)
	dpkg_path=$(type -p dpkg)

	if [ -e "$rpm_path" ]
	then
		yum -y install dstat
		exception_check
	elif [ -e $dpkg_path ]
	then
		apt-get install -y dstat
		exception_check
	else
		echo "Con't find dstat package"
	fi
}

function config_set ()
{
	if [ -d /etc/ariana ]
	then
		mkdir -p /etc/ariana
	fi
	echo "Data_Directory=/var/log/dstat" > /etc/ariana/config
	echo "rsyslog_Data_Directory=/data/volume/nfs/docker-data/dstat2graph/data" >> /etc/ariana/config
	echo "HostListFile=hostlist" >> /etc/ariana/config
	echo "ariana_agent_path=/usr/local/bin/ariana_agent" >> /etc/ariana/config
	echo "Download_url=https://raw.githubusercontent.com/code-post/ariana_agent/master/ariana_agent" >> /etc/ariana/config
	if [ -n $mode ]
	then
		sed -i "/mode=/d" /etc/ariana/config
		echo "mode="$mode" # work mode support to standalone or server. Default mode is standalone" >> /etc/ariana/config
	fi
	if [ -z $mode ]
	then
		sed -i "/mode=/d" /etc/ariana/config
		echo "mode=standalone # work mode support to standalone or server. Default mode is standalone" >> /etc/ariana/config
	fi
	if [ -n $rsyslog_server ]
	then
		sed -i "/rsyslog_server=/d" /etc/ariana/config
		echo "rsyslog_server="$rsyslog_server >> /etc/ariana/config
	fi
	echo "dstat_path=$(type -p dstat)" >> /etc/ariana/config
	echo "upload_url=$dashboard_url" >> /etc/ariana/config
	echo "" >> /etc/ariana/config
}

if [ ! -e /etc/ariana/config ]
then
	if [ -z $mode ]
        then
                print_help
                echo "ariana_agent mode doesn't define"
                echo "mode support to standalone or server"
                exit 1
        fi
	config_set
fi

function env_check ()
{
	if [  ! -d $Data_Directory ]
	then
		echo $Data_Directory" doesn't exist"
		exit 1
	fi

	if [ -z $upload_filename ]
	then
		upload_filename=$HostName-$Date.csv
	fi

	if [ -z $dstat_path ]
	then
		check_and_install
	fi
	if [[ "$Data_Directory" == "$rsyslog_Data_Directory" ]]
	then
		echo "must be diffrent data directory and rsyslog data directory"
		exit 1
	fi
}


if [ -z $HostName ]
then
	HostName=$(hostname -s)
fi

if [ -z $Date ]
then
#	Date=$(%Y-%m-%d)
	Date=$(date -d "yesterday" +%Y-%m-%d)
fi

if [ "$command" != "config" ]
then
	source /etc/ariana/config
	if [ "$command" != "update" ]
	then
        # enviroment check
        	env_check
	fi
fi

function update ()
{

	if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -eq 0 ]
	then
		curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# $Download_url?$(date +%s) -o /tmp/ariana_agent;
		exception_check quiet
		if [ "$(md5sum /tmp/ariana_agent | awk '{print $1}')" != "$(md5sum $ariana_agent_path | awk '{print $1}')" ]
		then
			chmod +x /tmp/ariana_agent
			exception_check quiet
			mv -f /tmp/ariana_agent $ariana_agent_path
			exception_check quiet
			echo "update done"
		else
			rm -rf /tmp/ariana_agent
			echo "ariana_agent already up to date"
		fi
	else
		echo "ariana_agent runnig"
	fi
}
function download_ariana_logrotate ()
{
	if [ $(ps -ef | grep -v grep | grep ariana_logrotate | wc -l) -eq 1 ]
        then
		pid=$(ps -ef | grep -v grep | grep ariana_logrotate | awk '{print $2}')
		kill -9 $pid
	fi
		exception_check
		curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# https://raw.githubusercontent.com/code-post/ariana_agent/master/ariana_logrotate?$(date +%s) -o /tmp/ariana_logrotate;
		exception_check quiet
		if [ -z $(type -p ariana_logrotate) ]
		then
			ariana_logrotate_path=/usr/local/bin/ariana_logrotate
		else
			ariana_logrotate_path=$(type -p ariana_logrotate)
		fi
	        if [ "$(md5sum /tmp/ariana_logrotate | awk '{print $1}')" != "$(md5sum $ariana_logrotate_path | awk '{print $1}')" ]
		then
			chmod +x /tmp/ariana_logrotate
			exception_check quiet
			mv -f  /tmp/ariana_logrotate $ariana_logrotate_path
			exception_check quiet
		else
			rm -rf /tmp/ariana_agent
		fi
}

function run ()
{
	Date=$(date +%Y-%m-%d)
	if [ "$rsyslog_mode" == "client" ]
	then
		# add hostname to hostlist file
		if [ $(grep $HostName $Data_Directory/$HostListFile | wc -l) -eq "0" ]
		then
			echo "Add "$HostName" to "$HostListFile
			echo $HostName >> $Data_Directory/$HostListFile
		fi
	fi
	# dstat running check
	if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -eq 0 ]
	then
		# csv file check
		# if [ -f $Data_Directory/$HostName-$Date.csv ] #change filename format $HostName-$Date.csv to $HostName.csv
		if [ -f $Data_Directory/$HostName.csv ]
		then
			# csv file count
			filecount=$(ls -alh $Data_Directory| grep $HostName-$Date.csv | wc -l)
			let filecount=$filecount+1
			# change for matting single number for dual number [0-9] -> [00-99]
			if [[ $(ls -alh $Data_Directory| grep $HostName-$Date.csv | wc -l) -lt "9" ]]
			then
				filecount=0$filecount
			fi
			# move exist csv file to csv.[00-99]
			echo $Data_Directory/$HostName.csv" file exists"
			echo $Data_Directory/$HostName.csv" has been moved to "$Data_Directory/$HostName-$Date.csv.$filecount
			mv $Data_Directory/$HostName.csv $Data_Directory/$HostName-$Date.csv.$filecount
			exception_check
		fi
		dstat -tvnfrs -N $(cat /proc/net/dev |grep -v Inter- | grep -v face | grep -v lo: | sed "s/://"| awk '{printf $1","}')total -C $(cat /proc/cpuinfo  | grep processor  | awk '{printf $3","}')total -D $(lsblk | grep disk | awk '{printf $1","}')total --output $Data_Directory/$HostName.csv > /dev/null &
		if [ "$mode" == "server" ]
		then
			logger -p local5.debug "[Ariana_status] ariana agent running"
		fi
	else
		running_check
	fi
}

function running_check ()
{
	running_day=$(head -n4  $Data_Directory/$HostName.csv | tail -n1 | awk -F\"Date:\",\" '{print $2}' | awk '{print $1}')
	running_month=$(date -d "$(head -n4  $Data_Directory/$HostName.csv | tail -n1 | awk -F\"Date:\",\" '{print $2}' | awk '{print $2 $1}')" +%m)
	running_year=$(head -n4  $Data_Directory/$HostName.csv | tail -n1 | awk -F\"Date:\",\" '{print $2}' | awk '{print $3}')
	dstat_running_date=$running_year-$running_month-$running_day
	Date=$(date +%Y-%m-%d)
	# compare dstat csv file date
	if [ "$Date" != "$dstat_running_date" ]
        then
        	echo "dstat collected old date. rerunning"
                echo "today is "$Date
		echo "dstat running date is "$dstat_running_date
                stop
		run
        else
                echo "dstat already running. check the dstat process."
                ps -ef | grep -v grep | grep "$dstat_path"
        fi

}


function merge ()
{
	# csv file count
	filecount=$(ls -alh $Data_Directory | grep $HostName-$Date.csv.'[00-99]' | wc -l)
	# check for dstat proccess before merge.
	if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -ne 0 ]
	then
		echo "dstat already running. check the dstat process."
		echo "can not be merge to dstat process running"
		ps -ef | grep -v grep | grep "$dstat_path"
		exit 0;
	fi

	if [ $filecount -eq 0 ]
	then
		echo "no need to merge"
		exit 0;
	fi

	if [ -f $Data_Directory/$HostName-$Date.csv.temp ]
  	then
		if [ "$(md5sum $Data_Directory/$HostName.csv | awk '{print $1}')" == "$(md5sum $Data_Directory/$HostName-$Date.csv.temp | awk '{print $1}')" ]
		then
			echo $Data_Directory/$HostName.csv" file already merged"
			exit 0;
		else
			rm -rf $Data_Directory/$HostName-$Date.csv.temp
			exception_check
		fi

  	fi


	echo $Data_Directory"/"$HostName".csv file move to "$Data_Directory"/"$HostName-$Date".csv.00"
	##### csv file formatting check start #####
	# remake csv header
	head -n 7 $Data_Directory/$HostName.csv > $Data_Directory/$HostName-$Date.csv.00
	exception_check
	# move to data except head and blank line
	cat $Data_Directory/$HostName.csv | sed "/\"/d" | sed "/^\s*$/d" | sort | uniq  >> $Data_Directory/$HostName-$Date.csv.00
	exception_check
	##### csv file formatting check end #####


	##### csv file merge start #####
	# first csv file merge
	echo $Data_Directory/$HostName-$Date.csv.00" file merged"
	cat $Data_Directory/$HostName-$Date.csv.00 > $Data_Directory/$HostName-$Date.csv.temp
	exception_check
	echo "found "$filecount " files"
	# merge all count csv file
	for i in $(seq 1 $filecount)
	do
		if [[ $i = [0-9] ]]
		then
			i=0$i
		fi
		echo $Data_Directory/$HostName-$Date.csv.$i" file merged"
		cat $Data_Directory/$HostName-$Date.csv.$i | sed "/\"/d" | sed "/^\s*$/d" | sort | uniq >> $Data_Directory/$HostName-$Date.csv.temp
		exception_check
	done
	# move to temp file to csv
	mv $Data_Directory/$HostName-$Date.csv.temp $Data_Directory/$HostName-$Date.csv
	exception_check
	# remove to csv.00 files
	for i in $(seq 0 $filecount)
	do
		if [[ $i = [0-9] ]]
		then
			i=0$i
		fi
		echo $Data_Directory/$HostName-$Date.csv.$i" file be deleted"
		rm -rf  $Data_Directory/$HostName-$Date.csv.$i
		exception_check
	done
	##### csv file merge end #####
	if [ "$mode" == "server" ]
	then
		logger -p local5.debug "[Ariana_status] ariana agent merged to "$HostName-$Date".csv"
	fi
}

function stop ()
{
        if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -ne 0 ]
	then
		pid=$(ps -ef | grep -v grep | grep $dstat_path | awk '{print $2}')
		echo "dstat running pid "$pid
		echo "Try stop dstat"
		kill -9 $pid
		exception_check

		if [ "$mode" == "server" ]
		then
			logger -p local5.debug "[Ariana_status] ariana agent stopped"
		fi
	else
		echo "can't find dstat process"
		exit 0
	fi
}

function status ()
{

        if [ $(ps -ef | grep -v grep | grep $dstat_path |wc -l) -ne 0 ]
	then
		pid=$(ps -ef | grep -v grep | grep $dstat_path | awk '{print $2}')
		echo "dstat running pid "$pid
		ps -ef | grep -v grep | grep $dstat_path | awk -F--output '{printf "Dstat logging is "$2"\n"}'
		echo "today's log files is "
		ls -alh $Data_Directory/$HostName.csv | awk '{printf "Log file "$9" size is "$5"\n"}'
		ls -alh $Data_Directory | grep $HostName-$Date.csv | awk '{printf "Log file "$9" size is "$5"\n"}'
	else
		echo "dstat doesn't running"
		exit 1
	fi
}

function server_config ()
{
	get_first_nic_ip=$(ip a | grep "inet " | grep -v "127.0.0.1/8" | head -n1 | awk '{print $2}' | awk -F/ '{print $1}')
	get_first_nic_name=$(ip a | grep "inet " | grep -v "127.0.0.1/8" | head -n1 | awk '{print $NF}')
	echo "\$ModLoad imtcp" > /etc/rsyslog.d/ariana_server.conf
	echo "\$InputTCPServerRun 514" >> /etc/rsyslog.d/ariana_server.conf
	echo "" >> /etc/rsyslog.d/ariana_server.conf
	echo "\$template LOG_FILENAME,\"/data/volume/nfs/docker-data/dstat2graph/data/%fromhost-ip%.csv\"" >> /etc/rsyslog.d/ariana_server.conf
	echo "\$template LOG_HEADER_FILENAME,\"/data/volume/nfs/docker-data/dstat2graph/data/%fromhost-ip%.header\"" >> /etc/rsyslog.d/ariana_server.conf
	echo "\$template ARIANA_FILENAME,\"/data/volume/nfs/docker-data/dstat2graph/data/ariana_status.log\"" >> /etc/rsyslog.d/ariana_server.conf
	echo "\$template Ariana_agent, \"%msg:2:4096%\n\"" >> /etc/rsyslog.d/ariana_server.conf
	echo "\$template Ariana_status, \"%fromhost-ip% %msg%\n\"" >> /etc/rsyslog.d/ariana_server.conf
	echo "" >> /etc/rsyslog.d/ariana_server.conf
	echo "if \$msg contains '[Ariana_status]' then {" >> /etc/rsyslog.d/ariana_server.conf
	echo "	local5.debug ?ARIANA_FILENAME;Ariana_status" >> /etc/rsyslog.d/ariana_server.conf
	echo "} else {" >> /etc/rsyslog.d/ariana_server.conf
	echo "	if \$msg contains '\"' then" >> /etc/rsyslog.d/ariana_server.conf
	echo "		local5.debug ?LOG_HEADER_FILENAME;Ariana_agent" >>  /etc/rsyslog.d/ariana_server.conf
	echo "	else" >> /etc/rsyslog.d/ariana_server.conf
	echo "		local5.debug ?LOG_FILENAME;Ariana_agent" >> /etc/rsyslog.d/ariana_server.conf
	echo "}" >> /etc/rsyslog.d/ariana_server.conf
	sed -i "/rsyslog_mode=/d" /etc/ariana/config
	echo "rsyslog_mode=server" >> /etc/ariana/config
        sed -i "/rsyslog_server=/d" /etc/ariana/config
        echo "rsyslog_server="$get_first_nic_ip >> /etc/ariana/config
	echo "rsyslog_server ip set ["$get_first_nic_ip"] from nic is "$get_first_nic_name
	echo "if you want modify server ip. using  -s option and config command. or modify your self rsyslog_server to /etc/ariana/config."
	service rsyslog restart
	exception_check
	download_ariana_logrotate
	if [ ! -e $rsyslog_Data_Directory/$HostListFile ]
	then
		touch $rsyslog_Data_Directory/$HostListFile
	fi
}

function rsyslog_set()
{
	for i in "/var/log/messages" "\-/var/log/syslog"
        do
                rsyslog_conf_file=$(grep -R "$i" /etc/rsyslog*  | awk -F: '{print $1}')
                rsyslog_conf=$(grep -R "$i" /etc/rsyslog*  | awk -F: '{print $2}' | awk '{print $1}' | sed "s/;local5.none;local6.none//")
                rsyslog_log_file=$(grep -R "$i" /etc/rsyslog*  | awk -F: '{print $2}' | awk '{print $2}')
		rsyslog_conf_number=$(grep -Rn "$i" /etc/rsyslog*  | awk -F: '{print $2}')
        done
		sed -i $rsyslog_conf_number"d" $rsyslog_conf_file
		echo $rsyslog_conf";local5.none;local6.none	"$rsyslog_log_file >> $rsyslog_conf_file
}

function  client_config ()
{
	if [ -z $rsyslog_server ]
	then
		echo " must define rsyslog server ip "
		echo " using -s options for define server ip"
	else
		echo "module(load=\"imfile\" PollingInterval=\"1\") " > /etc/rsyslog.d/ariana_agent.conf
		echo "" >> /etc/rsyslog.d/ariana_agent.conf
		echo "#dstat csv file " >> /etc/rsyslog.d/ariana_agent.conf
		echo "input(type=\"imfile\"" >> /etc/rsyslog.d/ariana_agent.conf
		echo "      File=\""$Data_Directory/$HostName".csv\"" >> /etc/rsyslog.d/ariana_agent.conf
		echo "      Tag=\"Ariana_agent\"" >> /etc/rsyslog.d/ariana_agent.conf
		echo "      Severity=\"debug\" " >> /etc/rsyslog.d/ariana_agent.conf
		echo "      Facility=\"local5\")" >> /etc/rsyslog.d/ariana_agent.conf
		echo "" >> /etc/rsyslog.d/ariana_agent.conf
		echo "local5.debug @@"$rsyslog_server":514" >> /etc/rsyslog.d/ariana_agent.conf
		sed -i "/rsyslog_mode=/d" /etc/ariana/config
		echo "rsyslog_mode=client" >> /etc/ariana/config
		service rsyslog restart
		exception_check
		sed -i "/ariana_agent/d" /etc/crontab
		echo "0 0 * * * root /usr/local/bin/ariana_agent stop;/usr/local/bin/ariana_agent merge;/usr/local/bin/ariana_agent run;" >> /etc/crontab
		# random upload time between 00h 01m to 00h 59m
		echo "$(expr $RANDOM % 59) 0 * * * root /usr/local/bin/ariana_agent upload ">> /etc/crontab
	fi
}

function ariana_logrotate_run()
{
	ariana_logrotate_path=$(type -p ariana_logrotate)
	if [ $(ps -ef | grep  $ariana_logrotate_path | grep -v grep | wc -l) -eq 0 ]
	then
		$ariana_logrotate_path > /dev/null &
		exception_check
	else
		ps -ef | grep  $ariana_logrotate_path | grep -v grep
		echo "ariana_logrotate running."
	fi
}

function file_upload ()
{
	if [ -z $upload_url ]
	then
		echo "upload url empty. define upload url"
		exit 1
	fi
	if [ -f $upload_filename ]
	then
		curl -i -F filedata=@$upload_filename $upload_url
		if [ "$mode" == "server" ]
		then
			logger -p local5.debug "[Ariana_status] ariana agent upload "$HostName-$Date".csv to "$upload_url
		fi
	else
		if [ "$mode" == "server" ]
		then
			logger -p local5.debug "[Ariana_status] ariana agent upload failed. "$HostName-$Date".csv is not exist"
		else
			echo $upload_filename" is not exist"
		fi
		exit 1
	fi
}


case $command in
	run)
		run
	;;
	merge)
		merge
	;;
	status)
		status
	;;
	stop)
		stop
	;;
	update)
		update
	;;
	config)
		config_set
	;;
	set_server)
		if [ "$mode" == "server" ]
		then
		#	client_config
			server_config
			rsyslog_set
		else
			echo "set_server command doesn't support standalone mode"
		fi
	;;
	set_client)
		if [ "$mode" == "server" ]
		then
			client_config
			rsyslog_set
		else
			echo "set_server command doesn't support standalone mode"
		fi
	;;
	upload)
		file_upload
	;;
	server_run)

		if [ "$rsyslog_mode" == "server" ]
		then
			ariana_logrotate_run
		else
			echo "server_run command doesn't support standalone mode"
		fi
	;;
	*)
		print_help
	;;
esac
